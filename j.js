// Generated by CoffeeScript 1.7.1
(function() {
  var j,
    __slice = [].slice;

  window.j = j = function() {
    var args, doArg, elements, jo, loadFuncs, map, onload, typeOf;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    typeOf = function(obj) {
      return Object.prototype.toString.call(obj).match(/^\[object\s(\w+)\]$/)[1];
    };
    loadFuncs = [];
    document.addEventListener('DOMContentLoaded', function() {
      var loadFunc, _i, _len;
      for (_i = 0, _len = loadFuncs.length; _i < _len; _i++) {
        loadFunc = loadFuncs[_i];
        loadFunc();
      }
      return loadFuncs = null;
    });
    onload = function(func) {
      if (loadFuncs === null) {
        return func();
      } else {
        return loadFuncs.push(func);
      }
    };
    elements = void 0;
    map = function(func) {
      var element, hasRet, ret, rets;
      hasRet = false;
      rets = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          element = elements[_i];
          ret = func(element);
          if (ret !== void 0) {
            hasRet = true;
          }
          _results.push(ret);
        }
        return _results;
      })();
      if (hasRet) {
        return rets;
      }
    };
    doArg = function(arg) {
      var key, mthName, ret, value, _ref;
      switch (typeOf(arg)) {
        case 'Function':
          if (elements != null) {
            return map(arg);
          } else {
            return onload(arg);
          }
          break;
        case 'Object':
          for (key in arg) {
            value = arg[key];
            _ref = key.match(/^([a-z]*)(.*)$/), key = _ref[0], mthName = _ref[1], key = _ref[2];
            if (key.length > 0) {
              key = key[0].toLowerCase() + key.slice(1);
            }
            ret = map(function(element) {
              var _base;
              return typeof (_base = j.mth)[mthName] === "function" ? _base[mthName](element, key, value) : void 0;
            });
          }
          return ret;
        case 'String':
          switch (arg[0]) {
            case '+':
              elements = (elements || []).concat(Array.prototype.slice.call(document.querySelectorAll(arg.slice(1))));
              break;
            default:
              elements = Array.prototype.slice.call(document.querySelectorAll(arg));
          }
      }
    };
    jo = function() {
      var arg, args, ret, _i, _len;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        arg = args[_i];
        ret = doArg(arg);
      }
      return ret || jo;
    };
    return jo.apply(null, args);
  };

  j.mth = {
    s: function(element, key, value) {
      if (value === null) {
        return element.style[key];
      } else {
        element.style[key] = value;
      }
    },
    a: function(element, key, value) {
      if (value === null) {
        return element.getAttribute(key);
      } else {
        element.setAttribute(key, value);
      }
    },
    html: function(element, key, value) {
      if (value === null) {
        return element.innerHTML;
      } else {
        element.innerHTML = value;
      }
    }
  };

}).call(this);

//# sourceMappingURL=j.map
